// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Timetable.DbContext;

namespace Timetable.DbContext.Migrations
{
    [DbContext(typeof(TimeTableDbContext))]
    [Migration("20220322034450_Init2")]
    partial class Init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.Entity("Timetable.DbContext.Models.AdministrativeClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AdministrativeClassState")
                        .HasColumnType("integer");

                    b.Property<long?>("CollegeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("AdministrativeClasses");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.AdministrativeClassBackup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("AdminstractiveClassId")
                        .HasColumnType("bigint");

                    b.Property<JsonElement>("BackupList")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AdminstractiveClassId");

                    b.ToTable("AdministrativeClassBackups");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Author")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content_CN")
                        .HasMaxLength(1048576)
                        .HasColumnType("character varying(1048576)");

                    b.Property<string>("Content_EN")
                        .HasMaxLength(1048576)
                        .HasColumnType("character varying(1048576)");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description_CN")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Description_EN")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublishData")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SEOKeywords_CN")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SEOKeywords_EN")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.Property<string>("Src")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Title_CN")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Title_EN")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<long>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Description_CN")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Description_EN")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSpecialUrl")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name_CN")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Name_EN")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SEOKeywords_CN")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SEOKeywords_EN")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("SortNum")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("VisibleInArticle")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.College", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.ToTable("Colleges");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long?>("AdministrativeClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AdminstractiveClassBackupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CollegeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("SchoolTermId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<string>("TeacherIdentityCode")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.Property<JsonElement>("TimebookJson")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeClassId");

                    b.HasIndex("AdminstractiveClassBackupId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SchoolTermId");

                    b.HasIndex("SubjectCode");

                    b.HasIndex("TeacherIdentityCode");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.CoursePick", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("StudentIdentityCode")
                        .IsRequired()
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentIdentityCode");

                    b.ToTable("CoursePIcks");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Headshot")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("PermissionEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RealName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SinglePointHsah")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LoginName")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.EmployeeLoginLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLoginLogs");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.EmployeeRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.PermissionGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Headshot")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int>("SN")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("PermissionGroups");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.PermissionLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("SN")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("PermissionLines");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Remark")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<long>("PermissionLineId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionLineId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.SchoolTerm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<DateTime>("CustomEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CustomStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FixedStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<int>("Term")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SchoolTerm");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Student", b =>
                {
                    b.Property<string>("IdentityCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("AdministrativeClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdmissionYear")
                        .HasColumnType("bigint");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("CollegeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Mobile")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RealName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SchoolOpenId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SinglePointHash")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("StudentState")
                        .HasColumnType("integer");

                    b.HasKey("IdentityCode");

                    b.HasIndex("AdministrativeClassId");

                    b.HasIndex("CollegeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SchoolOpenId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Subject", b =>
                {
                    b.Property<string>("SubjectCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long?>("CollegeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("SubjectProperty")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectType")
                        .HasColumnType("integer");

                    b.HasKey("SubjectCode");

                    b.HasIndex("CollegeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Teacher", b =>
                {
                    b.Property<string>("IdentityCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Mobile")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RealName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SchoolOpenId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SinglePointHash")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("IdentityCode");

                    b.HasIndex("SchoolOpenId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.AdministrativeClass", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.College", "College")
                        .WithMany("AdministrativeClasses")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Timetable.DbContext.Models.Department", "Department")
                        .WithMany("AdministrativeClasses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("College");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.AdministrativeClassBackup", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.AdministrativeClass", "AdministrativeClass")
                        .WithMany("AdministrativeClassBackups")
                        .HasForeignKey("AdminstractiveClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdministrativeClass");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Article", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.Channel", "Channel")
                        .WithMany("Articles")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Timetable.DbContext.Models.Employee", "Employee")
                        .WithMany("Articles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Channel", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.Channel", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Course", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.AdministrativeClass", "AdministrativeClass")
                        .WithMany("Courses")
                        .HasForeignKey("AdministrativeClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Timetable.DbContext.Models.AdministrativeClassBackup", "AdminstractiveClassBackup")
                        .WithMany("Courses")
                        .HasForeignKey("AdminstractiveClassBackupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Timetable.DbContext.Models.College", "College")
                        .WithMany("Courses")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Timetable.DbContext.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Timetable.DbContext.Models.SchoolTerm", "SchoolTerm")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolTermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Timetable.DbContext.Models.Subject", "Subject")
                        .WithMany("Courses")
                        .HasForeignKey("SubjectCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Timetable.DbContext.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherIdentityCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdministrativeClass");

                    b.Navigation("AdminstractiveClassBackup");

                    b.Navigation("College");

                    b.Navigation("Department");

                    b.Navigation("SchoolTerm");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.CoursePick", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.Course", "Course")
                        .WithMany("CoursePicks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Timetable.DbContext.Models.Student", "Student")
                        .WithMany("CoursePicks")
                        .HasForeignKey("StudentIdentityCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Department", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.College", "College")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("College");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Employee", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.Employee", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Timetable.DbContext.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Creator");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.EmployeeLoginLog", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.Employee", "Employee")
                        .WithMany("EmployeeLoginLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.EmployeeRole", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.Employee", "Employee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Timetable.DbContext.Models.Role", "Role")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.PermissionGroup", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.PermissionGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.PermissionLine", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.PermissionGroup", "Group")
                        .WithMany("PermissionLines")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.RolePermission", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.PermissionLine", "PermissionLine")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Timetable.DbContext.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionLine");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Student", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.AdministrativeClass", "AdministrativeClass")
                        .WithMany("Students")
                        .HasForeignKey("AdministrativeClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Timetable.DbContext.Models.College", "College")
                        .WithMany("Students")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Timetable.DbContext.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AdministrativeClass");

                    b.Navigation("College");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Subject", b =>
                {
                    b.HasOne("Timetable.DbContext.Models.College", "College")
                        .WithMany("Subjects")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Timetable.DbContext.Models.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("College");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.AdministrativeClass", b =>
                {
                    b.Navigation("AdministrativeClassBackups");

                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.AdministrativeClassBackup", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Channel", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.College", b =>
                {
                    b.Navigation("AdministrativeClasses");

                    b.Navigation("Courses");

                    b.Navigation("Departments");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Course", b =>
                {
                    b.Navigation("CoursePicks");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Department", b =>
                {
                    b.Navigation("AdministrativeClasses");

                    b.Navigation("Courses");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Employee", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("EmployeeLoginLogs");

                    b.Navigation("EmployeeRoles");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.PermissionGroup", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("PermissionLines");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.PermissionLine", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Role", b =>
                {
                    b.Navigation("EmployeeRoles");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.SchoolTerm", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Student", b =>
                {
                    b.Navigation("CoursePicks");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Subject", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Timetable.DbContext.Models.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
